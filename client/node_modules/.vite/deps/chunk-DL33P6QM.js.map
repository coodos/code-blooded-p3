{
  "version": 3,
  "sources": ["../../../../node_modules/immutable-json-patch/src/typeguards.ts", "../../../../node_modules/immutable-json-patch/src/utils.ts", "../../../../node_modules/immutable-json-patch/src/immutabilityHelpers.ts", "../../../../node_modules/immutable-json-patch/src/jsonPointer.ts", "../../../../node_modules/immutable-json-patch/src/immutableJSONPatch.ts", "../../../../node_modules/immutable-json-patch/src/revertJSONPatch.ts"],
  "sourcesContent": ["import {\r\n  JSONArray, JSONObject,\r\n  JSONPatchAdd,\r\n  JSONPatchCopy,\r\n  JSONPatchMove,\r\n  JSONPatchOperation,\r\n  JSONPatchRemove,\r\n  JSONPatchReplace,\r\n  JSONPatchTest\r\n} from './types'\r\n\r\nexport function isJSONArray (value: unknown) : value is JSONArray {\r\n  return Array.isArray(value)\r\n}\r\n\r\nexport function isJSONObject (value: unknown) : value is JSONObject {\r\n  return (\r\n    value !== null &&\r\n    typeof value === 'object' &&\r\n    value.constructor === Object // do not match on classes or Array\r\n  )\r\n}\r\n\r\nexport function isJSONPatchOperation (value: unknown) : value is JSONPatchOperation {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  return value && typeof value === 'object' ? typeof value.op === 'string' : false\r\n}\r\n\r\nexport function isJSONPatchAdd (value: unknown) : value is JSONPatchAdd {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  return value && typeof value === 'object' ? value.op === 'add' : false\r\n}\r\n\r\nexport function isJSONPatchRemove (value: unknown) : value is JSONPatchRemove {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  return value && typeof value === 'object' ? value.op === 'remove' : false\r\n}\r\n\r\nexport function isJSONPatchReplace (value: unknown) : value is JSONPatchReplace {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  return value && typeof value === 'object' ? value.op === 'replace' : false\r\n}\r\n\r\nexport function isJSONPatchCopy (value: unknown) : value is JSONPatchCopy {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  return value && typeof value === 'object' ? value.op === 'copy' : false\r\n}\r\n\r\nexport function isJSONPatchMove (value: unknown) : value is JSONPatchMove {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  return value && typeof value === 'object' ? value.op === 'move' : false\r\n}\r\n\r\nexport function isJSONPatchTest (value: unknown) : value is JSONPatchTest {\r\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n  // @ts-ignore\r\n  return value && typeof value === 'object' ? value.op === 'test' : false\r\n}\r\n", "import type { JSONValue } from './types'\r\n\r\n/**\r\n * Test deep equality of two JSON values, objects, or arrays\r\n */\r\n// TODO: write unit tests\r\nexport function isEqual (a: JSONValue, b: JSONValue) : boolean {\r\n  // FIXME: this function will return false for two objects with the same keys\r\n  //  but different order of keys\r\n  return JSON.stringify(a) === JSON.stringify(b)\r\n}\r\n\r\n/**\r\n * Test whether two values are strictly equal\r\n */\r\nexport function strictEqual (a: unknown, b: unknown) : boolean {\r\n  return a === b\r\n}\r\n\r\n/**\r\n * Get all but the last items from an array\r\n */\r\n// TODO: write unit tests\r\nexport function initial<T> (array: Array<T>) : Array<T> {\r\n  return array.slice(0, array.length - 1)\r\n}\r\n\r\n/**\r\n * Get the last item from an array\r\n */\r\n// TODO: write unit tests\r\nexport function last<T> (array: Array<T>) : T | undefined {\r\n  return array[array.length - 1]\r\n}\r\n\r\n/**\r\n * Test whether array1 starts with array2\r\n * @param array1\r\n * @param array2\r\n * @param [isEqual] Optional function to check equality\r\n */\r\nexport function startsWith<T> (array1: Array<T>, array2: Array<T>, isEqual = strictEqual) : boolean {\r\n  if (array1.length < array2.length) {\r\n    return false\r\n  }\r\n\r\n  for (let i = 0; i < array2.length; i++) {\r\n    if (!isEqual(array1[i], array2[i])) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\n/**\r\n * Test whether a value is an Object or an Array (and not a primitive JSON value)\r\n */\r\n// TODO: write unit tests\r\nexport function isObjectOrArray (value: unknown) : boolean {\r\n  return typeof value === 'object' && value !== null\r\n}\r\n", "/**\n * Immutability helpers\n *\n * inspiration:\n *\n * https://www.npmjs.com/package/seamless-immutable\n * https://www.npmjs.com/package/ih\n * https://www.npmjs.com/package/mutatis\n * https://github.com/mariocasciaro/object-path-immutable\n */\nimport { isJSONArray, isJSONObject } from './typeguards.js'\nimport type { JSONArray, JSONValue, JSONObject, JSONPath } from './types'\nimport { isObjectOrArray } from './utils.js'\n\n/**\n * Shallow clone of an Object, Array, or value\n * Symbols are cloned too.\n */\nexport function shallowClone<T extends JSONValue> (value: T) : T {\n  if (isJSONArray(value)) {\n    // copy array items\n    const copy: JSONArray = value.slice()\n\n    // copy all symbols\n    Object.getOwnPropertySymbols(value).forEach(symbol => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      copy[symbol] = value[symbol]\n    })\n\n    return copy as T\n  } else if (isJSONObject(value)) {\n    // copy object properties\n    const copy: JSONObject = { ...value }\n\n    // copy all symbols\n    Object.getOwnPropertySymbols(value).forEach(symbol => {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      copy[symbol] = value[symbol]\n    })\n\n    return copy as T\n  } else {\n    return value\n  }\n}\n\n/**\n * Update a value in an object in an immutable way.\n * If the value is unchanged, the original object will be returned\n */\nexport function applyProp<T extends JSONObject | JSONArray> (object: T, key: string | number, value: JSONValue) : T {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  if (object[key] === value) {\n    // return original object unchanged when the new value is identical to the old one\n    return object\n  } else {\n    const updatedObject = shallowClone(object)\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    updatedObject[key] = value\n    return updatedObject\n  }\n}\n\n/**\n * helper function to get a nested property in an object or array\n *\n * @return Returns the field when found, or undefined when the path doesn't exist\n */\nexport function getIn (object: JSONValue, path: JSONPath) : JSONValue | undefined {\n  let value: JSONValue | undefined = object\n  let i = 0\n\n  while (i < path.length) {\n    if (isJSONObject(value)) {\n      value = value[path[i]]\n    } else if (isJSONArray(value)) {\n      value = value[parseInt(path[i])]\n    } else {\n      value = undefined\n    }\n\n    i++\n  }\n\n  return value\n}\n\n/**\n * helper function to replace a nested property in an object with a new value\n * without mutating the object itself.\n *\n * @param object\n * @param path\n * @param value\n * @param [createPath=false]\n *                    If true, `path` will be created when (partly) missing in\n *                    the object. For correctly creating nested Arrays or\n *                    Objects, the function relies on `path` containing number\n *                    in case of array indexes.\n *                    If false (default), an error will be thrown when the\n *                    path doesn't exist.\n * @return Returns a new, updated object or array\n */\nexport function setIn (object: JSONValue, path: JSONPath, value: JSONValue, createPath = false) : JSONValue {\n  if (path.length === 0) {\n    return value\n  }\n\n  const key = path[0]\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const updatedValue = setIn(object ? object[key] : undefined, path.slice(1), value, createPath)\n\n  if (isJSONObject(object) || isJSONArray(object)) {\n    return applyProp(object, key, updatedValue)\n  } else {\n    if (createPath) {\n      const newObject = IS_INTEGER_REGEX.test(key)\n        ? []\n        : {}\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      newObject[key] = updatedValue\n      return newObject\n    } else {\n      throw new Error('Path does not exist')\n    }\n  }\n}\n\nconst IS_INTEGER_REGEX = /^\\d+$/\n\n/**\n * helper function to replace a nested property in an object with a new value\n * without mutating the object itself.\n *\n * @return  Returns a new, updated object or array\n */\nexport function updateIn (object: JSONValue, path: JSONPath, callback: (value: JSONValue) => JSONValue) : JSONValue {\n  if (path.length === 0) {\n    return callback(object)\n  }\n\n  if (!isObjectOrArray(object)) {\n    throw new Error('Path doesn\\'t exist')\n  }\n\n  const key = path[0]\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const updatedValue = updateIn(object[key], path.slice(1), callback)\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return applyProp(object, key, updatedValue)\n}\n\n/**\n * helper function to delete a nested property in an object\n * without mutating the object itself.\n *\n * @return Returns a new, updated object or array\n */\nexport function deleteIn<T extends JSONValue> (object: T, path: JSONPath) : T {\n  if (path.length === 0) {\n    return object\n  }\n\n  if (!isObjectOrArray(object)) {\n    throw new Error('Path does not exist')\n  }\n\n  if (path.length === 1) {\n    const key = path[0]\n    if (!(key in (object as object))) {\n      // key doesn't exist. return object unchanged\n      return object\n    } else {\n      const updatedObject = shallowClone(object)\n\n      if (isJSONArray(updatedObject)) {\n        updatedObject.splice(parseInt(key), 1)\n      } if (isJSONObject(updatedObject)) {\n        delete updatedObject[key]\n      }\n\n      return updatedObject\n    }\n  }\n\n  const key = path[0]\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const updatedValue = deleteIn(object[key], path.slice(1))\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return applyProp(object, key, updatedValue)\n}\n\n/**\n * Insert a new item in an array at a specific index.\n * Example usage:\n *\n *     insertAt({arr: [1,2,3]}, ['arr', '2'], 'inserted')  // [1,2,'inserted',3]\n */\nexport function insertAt (document: JSONObject | JSONArray, path: JSONPath, value: JSONValue) : JSONValue {\n  const parentPath = path.slice(0, path.length - 1)\n  const index = path[path.length - 1]\n\n  return updateIn(document, parentPath, (items) => {\n    if (!Array.isArray(items)) {\n      throw new TypeError('Array expected at path ' + JSON.stringify(parentPath))\n    }\n\n    const updatedItems = shallowClone(items)\n    updatedItems.splice(parseInt(index), 0, value)\n\n    return updatedItems\n  })\n}\n\n/**\n * Transform a JSON object, traverse over the whole object,\n * and allow replacing Objects/Arrays/values.\n */\nexport function transform (document: JSONValue, callback: (document: JSONValue, path: JSONPath) => JSONValue, path: JSONPath = []) : JSONValue {\n  const updated1 = callback(document, path)\n\n  if (isJSONArray(updated1)) { // array\n    let updated2\n\n    for (let i = 0; i < updated1.length; i++) {\n      const before = updated1[i]\n      // we stringify the index here, so the path only contains strings and can be safely\n      // stringified/parsed to JSONPointer without loosing information.\n      // We do not want to rely on path keys being numeric/string.\n      const after = transform(before, callback, path.concat(i + ''))\n      if (after !== before) {\n        if (!updated2) {\n          updated2 = shallowClone(updated1)\n        }\n        updated2[i] = after\n      }\n    }\n\n    return updated2 || updated1\n  } else if (isJSONObject(updated1)) { // object\n    let updated2\n\n    for (const key in updated1) {\n      if (Object.hasOwnProperty.call(updated1, key)) {\n        const before = updated1[key]\n        const after = transform(before, callback, path.concat(key))\n        if (after !== before) {\n          if (!updated2) {\n            updated2 = shallowClone(updated1)\n          }\n          updated2[key] = after\n        }\n      }\n    }\n\n    return updated2 || updated1\n  } else { // number, string, boolean, null\n    return updated1\n  }\n}\n\n/**\n * Test whether a path exists in a JSON object\n * @return Returns true if the path exists, else returns false\n */\nexport function existsIn (document: JSONValue, path: JSONPath) : boolean {\n  if (document === undefined) {\n    return false\n  }\n\n  if (path.length === 0) {\n    return true\n  }\n\n  if (document === null) {\n    return false\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return existsIn(document[path[0]], path.slice(1))\n}\n", "import type { JSONPath, JSONPointer } from './types'\n\n/**\n * Parse a JSON Pointer\n */\nexport function parseJSONPointer (pointer: JSONPointer) : string[] {\n  const path = pointer.split('/')\n  path.shift() // remove the first empty entry\n\n  return path.map(p => p.replace(/~1/g, '/').replace(/~0/g, '~'))\n}\n\n/**\n * Compile a JSON Pointer\n */\nexport function compileJSONPointer (path: JSONPath) : JSONPointer {\n  return path\n    .map(compileJSONPointerProp)\n    .join('')\n}\n\n/**\n * Compile a single path property from a JSONPath\n */\nexport function compileJSONPointerProp (pathProp: string | number) : JSONPointer {\n  return '/' + String(pathProp).replace(/~/g, '~0').replace(/\\//g, '~1')\n}\n\n/**\n * Append a path property to a JSONPointer\n */\nexport function appendToJSONPointer (pointer: JSONPointer, pathProp: string | number) : JSONPointer {\n  return pointer + compileJSONPointerProp(pathProp)\n}\n\n/**\n * Test whether `pointer` starts with `searchPointer`\n */\nexport function startsWithJSONPointer (pointer: JSONPointer, searchPointer: JSONPointer) : boolean {\n  return (\n    pointer.startsWith(searchPointer) &&\n    (pointer.length === searchPointer.length || pointer[searchPointer.length] === '/')\n  )\n}\n", "import {\n  deleteIn,\n  existsIn,\n  getIn,\n  insertAt,\n  setIn\n} from './immutabilityHelpers.js'\nimport { compileJSONPointer, parseJSONPointer } from './jsonPointer.js'\nimport {\n  JSONArray,\n  JSONValue,\n  JSONObject,\n  JSONPatchDocument,\n  JSONPatchOperation,\n  JSONPatchOptions,\n  JSONPath,\n  JSONPointer\n} from './types'\nimport { initial, isEqual, last } from './utils.js'\n\n/**\n * Apply a patch to a JSON object\n * The original JSON object will not be changed,\n * instead, the patch is applied in an immutable way\n */\nexport function immutableJSONPatch (document: JSONValue, operations: JSONPatchDocument, options?:JSONPatchOptions) : JSONValue {\n  let updatedDocument = document\n\n  for (let i = 0; i < operations.length; i++) {\n    validateJSONPatchOperation(operations[i])\n\n    let operation: JSONPatchOperation = operations[i]\n\n    // TODO: test before\n    if (options && options.before) {\n      const result = options.before(updatedDocument, operation)\n      if (result !== undefined) {\n        if (result.document !== undefined) {\n          updatedDocument = result.document\n        }\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        if (result.json !== undefined) {\n          // TODO: deprecated since v5.0.0. Cleanup this warning some day\n          throw new Error('Deprecation warning: returned object property \".json\" has been renamed to \".document\"')\n        }\n        if (result.operation !== undefined) {\n          operation = result.operation\n        }\n      }\n    }\n\n    const previousDocument = updatedDocument\n    const path = parsePath(updatedDocument, operation.path)\n    if (operation.op === 'add') {\n      updatedDocument = add(updatedDocument, path, operation.value)\n    } else if (operation.op === 'remove') {\n      updatedDocument = remove(updatedDocument as JSONObject | JSONArray, path)\n    } else if (operation.op === 'replace') {\n      updatedDocument = replace(updatedDocument, path, operation.value)\n    } else if (operation.op === 'copy') {\n      updatedDocument = copy(updatedDocument, path, parseFrom(operation.from))\n    } else if (operation.op === 'move') {\n      updatedDocument = move(updatedDocument, path, parseFrom(operation.from))\n    } else if (operation.op === 'test') {\n      test(updatedDocument, path, operation.value)\n    } else {\n      throw new Error('Unknown JSONPatch operation ' + JSON.stringify(operation))\n    }\n\n    // TODO: test after\n    if (options && options.after) {\n      const result = options.after(updatedDocument, operation, previousDocument)\n      if (result !== undefined) {\n        updatedDocument = result\n      }\n    }\n  }\n\n  return updatedDocument\n}\n\n/**\n * Replace an existing item\n */\nexport function replace (document: JSONValue, path: JSONPath, value: JSONValue) : JSONValue {\n  return setIn(document, path, value)\n}\n\n/**\n * Remove an item or property\n */\nexport function remove<T extends JSONArray | JSONObject> (document: T, path: JSONPath) : T {\n  return deleteIn(document, path)\n}\n\n/**\n * Add an item or property\n */\nexport function add (document: JSONValue, path: JSONPath, value: JSONValue) : JSONValue {\n  if (isArrayItem(document, path)) {\n    return insertAt(document, path, value)\n  } else {\n    return setIn(document, path, value)\n  }\n}\n\n/**\n * Copy a value\n */\nexport function copy (document: JSONValue, path: JSONPath, from: JSONPath) : JSONValue {\n  const value = getIn(document, from)\n\n  if (isArrayItem(document, path)) {\n    return insertAt(document, path, value)\n  } else {\n    const value = getIn(document, from)\n\n    return setIn(document, path, value)\n  }\n}\n\n/**\n * Move a value\n */\nexport function move (document: JSONValue, path: JSONPath, from: JSONPath) : JSONValue {\n  const value = getIn(document, from)\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const removedJson = deleteIn(document, from)\n\n  return isArrayItem(removedJson, path)\n    ? insertAt(removedJson, path, value)\n    : setIn(removedJson, path, value)\n}\n\n/**\n * Test whether the data contains the provided value at the specified path.\n * Throws an error when the test fails\n */\nexport function test (document: JSONValue, path: JSONPath, value: JSONValue) {\n  if (value === undefined) {\n    throw new Error(`Test failed: no value provided (path: \"${compileJSONPointer(path)}\")`)\n  }\n\n  if (!existsIn(document, path)) {\n    throw new Error(`Test failed: path not found (path: \"${compileJSONPointer(path)}\")`)\n  }\n\n  const actualValue = getIn(document, path)\n  if (!isEqual(actualValue, value)) {\n    throw new Error(`Test failed, value differs (path: \"${compileJSONPointer(path)}\")`)\n  }\n}\n\nexport function isArrayItem (document: JSONValue, path: JSONPath) : document is JSONArray {\n  if (path.length === 0) {\n    return false\n  }\n\n  const parent = getIn(document, initial(path))\n\n  return Array.isArray(parent)\n}\n\n/**\n * Resolve the path index of an array, resolves indexes '-'\n * @returns Returns the resolved path\n */\nexport function resolvePathIndex (document: JSONValue, path: JSONPath) : JSONPath {\n  if (last(path) !== '-') {\n    return path\n  }\n\n  const parentPath = initial(path)\n  const parent = getIn(document, parentPath)\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  return parentPath.concat(parent.length)\n}\n\n/**\n * Validate a JSONPatch operation.\n * Throws an error when there is an issue\n */\nexport function validateJSONPatchOperation (operation: JSONPatchOperation) {\n  // TODO: write unit tests\n  const ops = ['add', 'remove', 'replace', 'copy', 'move', 'test']\n\n  if (!ops.includes(operation.op)) {\n    throw new Error('Unknown JSONPatch op ' + JSON.stringify(operation.op))\n  }\n\n  if (typeof operation.path !== 'string') {\n    throw new Error('Required property \"path\" missing or not a string in operation ' + JSON.stringify(operation))\n  }\n\n  if (operation.op === 'copy' || operation.op === 'move') {\n    if (typeof operation.from !== 'string') {\n      throw new Error('Required property \"from\" missing or not a string in operation ' + JSON.stringify(operation))\n    }\n  }\n}\n\nexport function parsePath (document: JSONValue, pointer: JSONPointer) : JSONPath {\n  return resolvePathIndex(document, parseJSONPointer(pointer))\n}\n\nexport function parseFrom (fromPointer: JSONPointer) : JSONPath {\n  return parseJSONPointer(fromPointer)\n}\n", "import { existsIn, getIn } from './immutabilityHelpers.js'\nimport {\n  immutableJSONPatch,\n  isArrayItem,\n  parseFrom,\n  parsePath\n} from './immutableJSONPatch.js'\nimport { compileJSONPointer } from './jsonPointer.js'\nimport type {\n  JSONValue,\n  JSONPatchAdd,\n  JSONPatchDocument,\n  JSONPatchMove,\n  JSONPatchRemove,\n  JSONPatchReplace,\n  JSONPath,\n  RevertJSONPatchOptions\n} from './types.js'\nimport { startsWith } from './utils.js'\n\n/**\n * Create the inverse of a set of json patch operations\n * @param document\n * @param operations Array with JSON patch actions\n * @param [options]\n * @return Returns the operations to revert the changes\n */\nexport function revertJSONPatch (document: JSONValue, operations: JSONPatchDocument, options?: RevertJSONPatchOptions) : JSONPatchDocument {\n  let allRevertOperations: JSONPatchDocument = []\n\n  immutableJSONPatch(document, operations, {\n    before: (document, operation) => {\n      let revertOperations: JSONPatchDocument\n      const path = parsePath(document, operation.path)\n      if (operation.op === 'add') {\n        revertOperations = revertAdd(document, path)\n      } else if (operation.op === 'remove') {\n        revertOperations = revertRemove(document, path)\n      } else if (operation.op === 'replace') {\n        revertOperations = revertReplace(document, path)\n      } else if (operation.op === 'copy') {\n        revertOperations = revertCopy(document, path)\n      } else if (operation.op === 'move') {\n        revertOperations = revertMove(document, path, parseFrom(operation.from))\n      } else if (operation.op === 'test') {\n        revertOperations = []\n      } else {\n        throw new Error('Unknown JSONPatch operation ' + JSON.stringify(operation))\n      }\n\n      let updatedJson\n      if (options && options.before) {\n        const res = options.before(document, operation, revertOperations)\n        if (res && res.revertOperations) {\n          revertOperations = res.revertOperations\n        }\n        if (res && res.document) {\n          updatedJson = res.document\n        }\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        if (res && res.json) {\n          // TODO: deprecated since v5.0.0. Cleanup this warning some day\n          throw new Error('Deprecation warning: returned object property \".json\" has been renamed to \".document\"')\n        }\n      }\n\n      allRevertOperations = revertOperations.concat(allRevertOperations)\n\n      if (updatedJson !== undefined) {\n        return {\n          document: updatedJson\n        }\n      }\n    }\n  })\n\n  return allRevertOperations\n}\n\nfunction revertReplace (document: JSONValue, path: JSONPath) : [JSONPatchReplace] {\n  return [{\n    op: 'replace',\n    path: compileJSONPointer(path),\n    value: getIn(document, path)\n  }]\n}\n\nfunction revertRemove (document: JSONValue, path: JSONPath) : [JSONPatchAdd] {\n  return [{\n    op: 'add',\n    path: compileJSONPointer(path),\n    value: getIn(document, path)\n  }]\n}\n\nfunction revertAdd (document: JSONValue, path: JSONPath) : [JSONPatchRemove] | [JSONPatchReplace] {\n  if (isArrayItem(document, path) || !existsIn(document, path)) {\n    return [{\n      op: 'remove',\n      path: compileJSONPointer(path)\n    }]\n  } else {\n    return revertReplace(document, path)\n  }\n}\n\nfunction revertCopy (document: JSONValue, path: JSONPath) : [JSONPatchRemove] | [JSONPatchReplace] {\n  return revertAdd(document, path)\n}\n\nfunction revertMove (document: JSONValue, path: JSONPath, from: JSONPath) : [JSONPatchReplace] | [JSONPatchMove] | [JSONPatchMove, JSONPatchAdd] {\n  if (path.length < from.length && startsWith(from, path)) {\n    // replacing the parent with the child\n    return [\n      {\n        op: 'replace',\n        path: compileJSONPointer(path),\n        value: document\n      }\n    ]\n  }\n\n  const move: JSONPatchMove = {\n    op: 'move',\n    from: compileJSONPointer(path),\n    path: compileJSONPointer(from)\n  }\n\n  if (!isArrayItem(document, path) && existsIn(document, path)) {\n    // the move replaces an existing value in an object\n    return [\n      move,\n      ...revertRemove(document, path)\n    ]\n  } else {\n    return [\n      move\n    ]\n  }\n}\n"],
  "mappings": "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",
  "names": ["isJSONArray", "value", "Array", "isArray", "isJSONObject", "constructor", "Object", "isJSONPatchOperation", "op", "isJSONPatchAdd", "isJSONPatchRemove", "isJSONPatchReplace", "isJSONPatchCopy", "isJSONPatchMove", "isJSONPatchTest", "isEqual", "a", "b", "JSON", "stringify", "strictEqual", "initial", "array", "slice", "length", "last", "startsWith", "array1", "array2", "i", "isObjectOrArray", "value", "_typeof", "shallowClone", "value", "isJSONArray", "copy", "slice", "Object", "getOwnPropertySymbols", "forEach", "symbol", "isJSONObject", "applyProp", "object", "key", "updatedObject", "getIn", "path", "i", "length", "parseInt", "undefined", "setIn", "createPath", "updatedValue", "newObject", "IS_INTEGER_REGEX", "test", "Error", "updateIn", "callback", "isObjectOrArray", "deleteIn", "splice", "insertAt", "document", "parentPath", "index", "items", "Array", "isArray", "TypeError", "JSON", "stringify", "updatedItems", "transform", "updated1", "updated2", "before", "after", "concat", "hasOwnProperty", "call", "existsIn", "parseJSONPointer", "pointer", "path", "split", "shift", "map", "p", "replace", "compileJSONPointer", "compileJSONPointerProp", "join", "pathProp", "String", "appendToJSONPointer", "startsWithJSONPointer", "searchPointer", "startsWith", "length", "immutableJSONPatch", "document", "operations", "options", "updatedDocument", "i", "length", "validateJSONPatchOperation", "operation", "before", "result", "undefined", "json", "Error", "previousDocument", "path", "parsePath", "op", "add", "value", "remove", "replace", "copy", "parseFrom", "from", "move", "test", "JSON", "stringify", "after", "setIn", "deleteIn", "isArrayItem", "insertAt", "getIn", "removedJson", "compileJSONPointer", "existsIn", "actualValue", "isEqual", "parent", "initial", "Array", "isArray", "resolvePathIndex", "last", "parentPath", "concat", "ops", "includes", "pointer", "parseJSONPointer", "fromPointer", "revertJSONPatch", "document", "operations", "options", "allRevertOperations", "immutableJSONPatch", "before", "operation", "revertOperations", "path", "parsePath", "op", "revertAdd", "revertRemove", "revertReplace", "revertCopy", "revertMove", "parseFrom", "from", "Error", "JSON", "stringify", "updatedJson", "res", "json", "concat", "undefined", "compileJSONPointer", "value", "getIn", "isArrayItem", "existsIn", "length", "startsWith", "move"]
}
